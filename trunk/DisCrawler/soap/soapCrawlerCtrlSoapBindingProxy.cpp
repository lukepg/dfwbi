/* soapCrawlerCtrlSoapBindingProxy.cpp
   Generated by gSOAP 2.7.15 from CrawlerCtrl.h
   Copyright(C) 2000-2009, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "soapCrawlerCtrlSoapBindingProxy.h"

CrawlerCtrlSoapBindingProxy::CrawlerCtrlSoapBindingProxy()
{	CrawlerCtrlSoapBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

CrawlerCtrlSoapBindingProxy::CrawlerCtrlSoapBindingProxy(const struct soap &_soap) :soap(_soap)
{ }

CrawlerCtrlSoapBindingProxy::CrawlerCtrlSoapBindingProxy(soap_mode iomode)
{	CrawlerCtrlSoapBindingProxy_init(iomode, iomode);
}

CrawlerCtrlSoapBindingProxy::CrawlerCtrlSoapBindingProxy(soap_mode imode, soap_mode omode)
{	CrawlerCtrlSoapBindingProxy_init(imode, omode);
}

void CrawlerCtrlSoapBindingProxy::CrawlerCtrlSoapBindingProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"nyapc2", "http://dao.crawler.nyapc", NULL, NULL},
	{"nyapc1", "http://crawler.nyapc", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	if (!this->namespaces)
		this->namespaces = namespaces;
}

CrawlerCtrlSoapBindingProxy::~CrawlerCtrlSoapBindingProxy()
{ }

void CrawlerCtrlSoapBindingProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void CrawlerCtrlSoapBindingProxy::soap_noheader()
{	header = NULL;
}

const SOAP_ENV__Fault *CrawlerCtrlSoapBindingProxy::soap_fault()
{	return this->fault;
}

const char *CrawlerCtrlSoapBindingProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *CrawlerCtrlSoapBindingProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int CrawlerCtrlSoapBindingProxy::soap_close_socket()
{	return soap_closesock(this);
}

void CrawlerCtrlSoapBindingProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
void CrawlerCtrlSoapBindingProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}

char *CrawlerCtrlSoapBindingProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int CrawlerCtrlSoapBindingProxy::add(_nyapc1__add *nyapc1__add, _nyapc1__addResponse *nyapc1__addResponse)
{	struct soap *soap = this;
	struct __nyapc1__add soap_tmp___nyapc1__add;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://10.8.0.55:8081/WebServiceCrawler/services/CrawlerCtrl";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___nyapc1__add.nyapc1__add = nyapc1__add;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___nyapc1__add(soap, &soap_tmp___nyapc1__add);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___nyapc1__add(soap, &soap_tmp___nyapc1__add, "-nyapc1:add", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___nyapc1__add(soap, &soap_tmp___nyapc1__add, "-nyapc1:add", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!nyapc1__addResponse)
		return soap_closesock(soap);
	nyapc1__addResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	nyapc1__addResponse->soap_get(soap, "nyapc1:addResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CrawlerCtrlSoapBindingProxy::getVersion(_nyapc1__getVersion *nyapc1__getVersion, _nyapc1__getVersionResponse *nyapc1__getVersionResponse)
{	struct soap *soap = this;
	struct __nyapc1__getVersion soap_tmp___nyapc1__getVersion;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://10.8.0.55:8081/WebServiceCrawler/services/CrawlerCtrl";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___nyapc1__getVersion.nyapc1__getVersion = nyapc1__getVersion;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___nyapc1__getVersion(soap, &soap_tmp___nyapc1__getVersion);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___nyapc1__getVersion(soap, &soap_tmp___nyapc1__getVersion, "-nyapc1:getVersion", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___nyapc1__getVersion(soap, &soap_tmp___nyapc1__getVersion, "-nyapc1:getVersion", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!nyapc1__getVersionResponse)
		return soap_closesock(soap);
	nyapc1__getVersionResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	nyapc1__getVersionResponse->soap_get(soap, "nyapc1:getVersionResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CrawlerCtrlSoapBindingProxy::getJob(_nyapc1__getJob *nyapc1__getJob, _nyapc1__getJobResponse *nyapc1__getJobResponse)
{	struct soap *soap = this;
	struct __nyapc1__getJob soap_tmp___nyapc1__getJob;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://10.8.0.55:8081/WebServiceCrawler/services/CrawlerCtrl";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___nyapc1__getJob.nyapc1__getJob = nyapc1__getJob;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___nyapc1__getJob(soap, &soap_tmp___nyapc1__getJob);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___nyapc1__getJob(soap, &soap_tmp___nyapc1__getJob, "-nyapc1:getJob", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___nyapc1__getJob(soap, &soap_tmp___nyapc1__getJob, "-nyapc1:getJob", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!nyapc1__getJobResponse)
		return soap_closesock(soap);
	nyapc1__getJobResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	nyapc1__getJobResponse->soap_get(soap, "nyapc1:getJobResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CrawlerCtrlSoapBindingProxy::addJob(_nyapc1__addJob *nyapc1__addJob, _nyapc1__addJobResponse *nyapc1__addJobResponse)
{	struct soap *soap = this;
	struct __nyapc1__addJob soap_tmp___nyapc1__addJob;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://10.8.0.55:8081/WebServiceCrawler/services/CrawlerCtrl";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___nyapc1__addJob.nyapc1__addJob = nyapc1__addJob;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___nyapc1__addJob(soap, &soap_tmp___nyapc1__addJob);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___nyapc1__addJob(soap, &soap_tmp___nyapc1__addJob, "-nyapc1:addJob", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___nyapc1__addJob(soap, &soap_tmp___nyapc1__addJob, "-nyapc1:addJob", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!nyapc1__addJobResponse)
		return soap_closesock(soap);
	nyapc1__addJobResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	nyapc1__addJobResponse->soap_get(soap, "nyapc1:addJobResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CrawlerCtrlSoapBindingProxy::hasTask(_nyapc1__hasTask *nyapc1__hasTask, _nyapc1__hasTaskResponse *nyapc1__hasTaskResponse)
{	struct soap *soap = this;
	struct __nyapc1__hasTask soap_tmp___nyapc1__hasTask;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://10.8.0.55:8081/WebServiceCrawler/services/CrawlerCtrl";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___nyapc1__hasTask.nyapc1__hasTask = nyapc1__hasTask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___nyapc1__hasTask(soap, &soap_tmp___nyapc1__hasTask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___nyapc1__hasTask(soap, &soap_tmp___nyapc1__hasTask, "-nyapc1:hasTask", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___nyapc1__hasTask(soap, &soap_tmp___nyapc1__hasTask, "-nyapc1:hasTask", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!nyapc1__hasTaskResponse)
		return soap_closesock(soap);
	nyapc1__hasTaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	nyapc1__hasTaskResponse->soap_get(soap, "nyapc1:hasTaskResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CrawlerCtrlSoapBindingProxy::updateJob(_nyapc1__updateJob *nyapc1__updateJob, _nyapc1__updateJobResponse *nyapc1__updateJobResponse)
{	struct soap *soap = this;
	struct __nyapc1__updateJob soap_tmp___nyapc1__updateJob;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://10.8.0.55:8081/WebServiceCrawler/services/CrawlerCtrl";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___nyapc1__updateJob.nyapc1__updateJob = nyapc1__updateJob;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___nyapc1__updateJob(soap, &soap_tmp___nyapc1__updateJob);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___nyapc1__updateJob(soap, &soap_tmp___nyapc1__updateJob, "-nyapc1:updateJob", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___nyapc1__updateJob(soap, &soap_tmp___nyapc1__updateJob, "-nyapc1:updateJob", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!nyapc1__updateJobResponse)
		return soap_closesock(soap);
	nyapc1__updateJobResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	nyapc1__updateJobResponse->soap_get(soap, "nyapc1:updateJobResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CrawlerCtrlSoapBindingProxy::getWrapper(_nyapc1__getWrapper *nyapc1__getWrapper, _nyapc1__getWrapperResponse *nyapc1__getWrapperResponse)
{	struct soap *soap = this;
	struct __nyapc1__getWrapper soap_tmp___nyapc1__getWrapper;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://10.8.0.55:8081/WebServiceCrawler/services/CrawlerCtrl";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___nyapc1__getWrapper.nyapc1__getWrapper = nyapc1__getWrapper;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___nyapc1__getWrapper(soap, &soap_tmp___nyapc1__getWrapper);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___nyapc1__getWrapper(soap, &soap_tmp___nyapc1__getWrapper, "-nyapc1:getWrapper", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___nyapc1__getWrapper(soap, &soap_tmp___nyapc1__getWrapper, "-nyapc1:getWrapper", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!nyapc1__getWrapperResponse)
		return soap_closesock(soap);
	nyapc1__getWrapperResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	nyapc1__getWrapperResponse->soap_get(soap, "nyapc1:getWrapperResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CrawlerCtrlSoapBindingProxy::addWrapper(_nyapc1__addWrapper *nyapc1__addWrapper, _nyapc1__addWrapperResponse *nyapc1__addWrapperResponse)
{	struct soap *soap = this;
	struct __nyapc1__addWrapper soap_tmp___nyapc1__addWrapper;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://10.8.0.55:8081/WebServiceCrawler/services/CrawlerCtrl";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___nyapc1__addWrapper.nyapc1__addWrapper = nyapc1__addWrapper;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___nyapc1__addWrapper(soap, &soap_tmp___nyapc1__addWrapper);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___nyapc1__addWrapper(soap, &soap_tmp___nyapc1__addWrapper, "-nyapc1:addWrapper", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___nyapc1__addWrapper(soap, &soap_tmp___nyapc1__addWrapper, "-nyapc1:addWrapper", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!nyapc1__addWrapperResponse)
		return soap_closesock(soap);
	nyapc1__addWrapperResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	nyapc1__addWrapperResponse->soap_get(soap, "nyapc1:addWrapperResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CrawlerCtrlSoapBindingProxy::getTask(_nyapc1__getTask *nyapc1__getTask, _nyapc1__getTaskResponse *nyapc1__getTaskResponse)
{	struct soap *soap = this;
	struct __nyapc1__getTask soap_tmp___nyapc1__getTask;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://10.8.0.55:8081/WebServiceCrawler/services/CrawlerCtrl";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___nyapc1__getTask.nyapc1__getTask = nyapc1__getTask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___nyapc1__getTask(soap, &soap_tmp___nyapc1__getTask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___nyapc1__getTask(soap, &soap_tmp___nyapc1__getTask, "-nyapc1:getTask", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___nyapc1__getTask(soap, &soap_tmp___nyapc1__getTask, "-nyapc1:getTask", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!nyapc1__getTaskResponse)
		return soap_closesock(soap);
	nyapc1__getTaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	nyapc1__getTaskResponse->soap_get(soap, "nyapc1:getTaskResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CrawlerCtrlSoapBindingProxy::getWrapTask(_nyapc1__getWrapTask *nyapc1__getWrapTask, _nyapc1__getWrapTaskResponse *nyapc1__getWrapTaskResponse)
{	struct soap *soap = this;
	struct __nyapc1__getWrapTask soap_tmp___nyapc1__getWrapTask;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://10.8.0.55:8081/WebServiceCrawler/services/CrawlerCtrl";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___nyapc1__getWrapTask.nyapc1__getWrapTask = nyapc1__getWrapTask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___nyapc1__getWrapTask(soap, &soap_tmp___nyapc1__getWrapTask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___nyapc1__getWrapTask(soap, &soap_tmp___nyapc1__getWrapTask, "-nyapc1:getWrapTask", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___nyapc1__getWrapTask(soap, &soap_tmp___nyapc1__getWrapTask, "-nyapc1:getWrapTask", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!nyapc1__getWrapTaskResponse)
		return soap_closesock(soap);
	nyapc1__getWrapTaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	nyapc1__getWrapTaskResponse->soap_get(soap, "nyapc1:getWrapTaskResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CrawlerCtrlSoapBindingProxy::takeWrapTask(_nyapc1__takeWrapTask *nyapc1__takeWrapTask, _nyapc1__takeWrapTaskResponse *nyapc1__takeWrapTaskResponse)
{	struct soap *soap = this;
	struct __nyapc1__takeWrapTask soap_tmp___nyapc1__takeWrapTask;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://10.8.0.55:8081/WebServiceCrawler/services/CrawlerCtrl";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___nyapc1__takeWrapTask.nyapc1__takeWrapTask = nyapc1__takeWrapTask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___nyapc1__takeWrapTask(soap, &soap_tmp___nyapc1__takeWrapTask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___nyapc1__takeWrapTask(soap, &soap_tmp___nyapc1__takeWrapTask, "-nyapc1:takeWrapTask", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___nyapc1__takeWrapTask(soap, &soap_tmp___nyapc1__takeWrapTask, "-nyapc1:takeWrapTask", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!nyapc1__takeWrapTaskResponse)
		return soap_closesock(soap);
	nyapc1__takeWrapTaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	nyapc1__takeWrapTaskResponse->soap_get(soap, "nyapc1:takeWrapTaskResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CrawlerCtrlSoapBindingProxy::getWrapInvalidTask(_nyapc1__getWrapInvalidTask *nyapc1__getWrapInvalidTask, _nyapc1__getWrapInvalidTaskResponse *nyapc1__getWrapInvalidTaskResponse)
{	struct soap *soap = this;
	struct __nyapc1__getWrapInvalidTask soap_tmp___nyapc1__getWrapInvalidTask;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://10.8.0.55:8081/WebServiceCrawler/services/CrawlerCtrl";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___nyapc1__getWrapInvalidTask.nyapc1__getWrapInvalidTask = nyapc1__getWrapInvalidTask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___nyapc1__getWrapInvalidTask(soap, &soap_tmp___nyapc1__getWrapInvalidTask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___nyapc1__getWrapInvalidTask(soap, &soap_tmp___nyapc1__getWrapInvalidTask, "-nyapc1:getWrapInvalidTask", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___nyapc1__getWrapInvalidTask(soap, &soap_tmp___nyapc1__getWrapInvalidTask, "-nyapc1:getWrapInvalidTask", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!nyapc1__getWrapInvalidTaskResponse)
		return soap_closesock(soap);
	nyapc1__getWrapInvalidTaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	nyapc1__getWrapInvalidTaskResponse->soap_get(soap, "nyapc1:getWrapInvalidTaskResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CrawlerCtrlSoapBindingProxy::updateWrapper(_nyapc1__updateWrapper *nyapc1__updateWrapper, _nyapc1__updateWrapperResponse *nyapc1__updateWrapperResponse)
{	struct soap *soap = this;
	struct __nyapc1__updateWrapper soap_tmp___nyapc1__updateWrapper;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://10.8.0.55:8081/WebServiceCrawler/services/CrawlerCtrl";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___nyapc1__updateWrapper.nyapc1__updateWrapper = nyapc1__updateWrapper;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___nyapc1__updateWrapper(soap, &soap_tmp___nyapc1__updateWrapper);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___nyapc1__updateWrapper(soap, &soap_tmp___nyapc1__updateWrapper, "-nyapc1:updateWrapper", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___nyapc1__updateWrapper(soap, &soap_tmp___nyapc1__updateWrapper, "-nyapc1:updateWrapper", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!nyapc1__updateWrapperResponse)
		return soap_closesock(soap);
	nyapc1__updateWrapperResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	nyapc1__updateWrapperResponse->soap_get(soap, "nyapc1:updateWrapperResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CrawlerCtrlSoapBindingProxy::updateWrapperCheckOk(_nyapc1__updateWrapperCheckOk *nyapc1__updateWrapperCheckOk, _nyapc1__updateWrapperCheckOkResponse *nyapc1__updateWrapperCheckOkResponse)
{	struct soap *soap = this;
	struct __nyapc1__updateWrapperCheckOk soap_tmp___nyapc1__updateWrapperCheckOk;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://10.8.0.55:8081/WebServiceCrawler/services/CrawlerCtrl";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___nyapc1__updateWrapperCheckOk.nyapc1__updateWrapperCheckOk = nyapc1__updateWrapperCheckOk;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___nyapc1__updateWrapperCheckOk(soap, &soap_tmp___nyapc1__updateWrapperCheckOk);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___nyapc1__updateWrapperCheckOk(soap, &soap_tmp___nyapc1__updateWrapperCheckOk, "-nyapc1:updateWrapperCheckOk", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___nyapc1__updateWrapperCheckOk(soap, &soap_tmp___nyapc1__updateWrapperCheckOk, "-nyapc1:updateWrapperCheckOk", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!nyapc1__updateWrapperCheckOkResponse)
		return soap_closesock(soap);
	nyapc1__updateWrapperCheckOkResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	nyapc1__updateWrapperCheckOkResponse->soap_get(soap, "nyapc1:updateWrapperCheckOkResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CrawlerCtrlSoapBindingProxy::getStat(_nyapc1__getStat *nyapc1__getStat, _nyapc1__getStatResponse *nyapc1__getStatResponse)
{	struct soap *soap = this;
	struct __nyapc1__getStat soap_tmp___nyapc1__getStat;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://10.8.0.55:8081/WebServiceCrawler/services/CrawlerCtrl";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___nyapc1__getStat.nyapc1__getStat = nyapc1__getStat;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___nyapc1__getStat(soap, &soap_tmp___nyapc1__getStat);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___nyapc1__getStat(soap, &soap_tmp___nyapc1__getStat, "-nyapc1:getStat", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___nyapc1__getStat(soap, &soap_tmp___nyapc1__getStat, "-nyapc1:getStat", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!nyapc1__getStatResponse)
		return soap_closesock(soap);
	nyapc1__getStatResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	nyapc1__getStatResponse->soap_get(soap, "nyapc1:getStatResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CrawlerCtrlSoapBindingProxy::putResult(_nyapc1__putResult *nyapc1__putResult, _nyapc1__putResultResponse *nyapc1__putResultResponse)
{	struct soap *soap = this;
	struct __nyapc1__putResult soap_tmp___nyapc1__putResult;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://10.8.0.55:8081/WebServiceCrawler/services/CrawlerCtrl";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___nyapc1__putResult.nyapc1__putResult = nyapc1__putResult;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___nyapc1__putResult(soap, &soap_tmp___nyapc1__putResult);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___nyapc1__putResult(soap, &soap_tmp___nyapc1__putResult, "-nyapc1:putResult", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___nyapc1__putResult(soap, &soap_tmp___nyapc1__putResult, "-nyapc1:putResult", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!nyapc1__putResultResponse)
		return soap_closesock(soap);
	nyapc1__putResultResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	nyapc1__putResultResponse->soap_get(soap, "nyapc1:putResultResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CrawlerCtrlSoapBindingProxy::getJobID(_nyapc1__getJobID *nyapc1__getJobID, _nyapc1__getJobIDResponse *nyapc1__getJobIDResponse)
{	struct soap *soap = this;
	struct __nyapc1__getJobID soap_tmp___nyapc1__getJobID;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://10.8.0.55:8081/WebServiceCrawler/services/CrawlerCtrl";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___nyapc1__getJobID.nyapc1__getJobID = nyapc1__getJobID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___nyapc1__getJobID(soap, &soap_tmp___nyapc1__getJobID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___nyapc1__getJobID(soap, &soap_tmp___nyapc1__getJobID, "-nyapc1:getJobID", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___nyapc1__getJobID(soap, &soap_tmp___nyapc1__getJobID, "-nyapc1:getJobID", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!nyapc1__getJobIDResponse)
		return soap_closesock(soap);
	nyapc1__getJobIDResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	nyapc1__getJobIDResponse->soap_get(soap, "nyapc1:getJobIDResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CrawlerCtrlSoapBindingProxy::getJobs(_nyapc1__getJobs *nyapc1__getJobs, _nyapc1__getJobsResponse *nyapc1__getJobsResponse)
{	struct soap *soap = this;
	struct __nyapc1__getJobs soap_tmp___nyapc1__getJobs;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://10.8.0.55:8081/WebServiceCrawler/services/CrawlerCtrl";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___nyapc1__getJobs.nyapc1__getJobs = nyapc1__getJobs;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___nyapc1__getJobs(soap, &soap_tmp___nyapc1__getJobs);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___nyapc1__getJobs(soap, &soap_tmp___nyapc1__getJobs, "-nyapc1:getJobs", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___nyapc1__getJobs(soap, &soap_tmp___nyapc1__getJobs, "-nyapc1:getJobs", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!nyapc1__getJobsResponse)
		return soap_closesock(soap);
	nyapc1__getJobsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	nyapc1__getJobsResponse->soap_get(soap, "nyapc1:getJobsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CrawlerCtrlSoapBindingProxy::getJobsWrapStatInvalid(_nyapc1__getJobsWrapStatInvalid *nyapc1__getJobsWrapStatInvalid, _nyapc1__getJobsWrapStatInvalidResponse *nyapc1__getJobsWrapStatInvalidResponse)
{	struct soap *soap = this;
	struct __nyapc1__getJobsWrapStatInvalid soap_tmp___nyapc1__getJobsWrapStatInvalid;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://10.8.0.55:8081/WebServiceCrawler/services/CrawlerCtrl";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___nyapc1__getJobsWrapStatInvalid.nyapc1__getJobsWrapStatInvalid = nyapc1__getJobsWrapStatInvalid;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___nyapc1__getJobsWrapStatInvalid(soap, &soap_tmp___nyapc1__getJobsWrapStatInvalid);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___nyapc1__getJobsWrapStatInvalid(soap, &soap_tmp___nyapc1__getJobsWrapStatInvalid, "-nyapc1:getJobsWrapStatInvalid", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___nyapc1__getJobsWrapStatInvalid(soap, &soap_tmp___nyapc1__getJobsWrapStatInvalid, "-nyapc1:getJobsWrapStatInvalid", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!nyapc1__getJobsWrapStatInvalidResponse)
		return soap_closesock(soap);
	nyapc1__getJobsWrapStatInvalidResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	nyapc1__getJobsWrapStatInvalidResponse->soap_get(soap, "nyapc1:getJobsWrapStatInvalidResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CrawlerCtrlSoapBindingProxy::getWrapGen(_nyapc1__getWrapGen *nyapc1__getWrapGen, _nyapc1__getWrapGenResponse *nyapc1__getWrapGenResponse)
{	struct soap *soap = this;
	struct __nyapc1__getWrapGen soap_tmp___nyapc1__getWrapGen;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://10.8.0.55:8081/WebServiceCrawler/services/CrawlerCtrl";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___nyapc1__getWrapGen.nyapc1__getWrapGen = nyapc1__getWrapGen;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___nyapc1__getWrapGen(soap, &soap_tmp___nyapc1__getWrapGen);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___nyapc1__getWrapGen(soap, &soap_tmp___nyapc1__getWrapGen, "-nyapc1:getWrapGen", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___nyapc1__getWrapGen(soap, &soap_tmp___nyapc1__getWrapGen, "-nyapc1:getWrapGen", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!nyapc1__getWrapGenResponse)
		return soap_closesock(soap);
	nyapc1__getWrapGenResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	nyapc1__getWrapGenResponse->soap_get(soap, "nyapc1:getWrapGenResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CrawlerCtrlSoapBindingProxy::updateWrapGen(_nyapc1__updateWrapGen *nyapc1__updateWrapGen, _nyapc1__updateWrapGenResponse *nyapc1__updateWrapGenResponse)
{	struct soap *soap = this;
	struct __nyapc1__updateWrapGen soap_tmp___nyapc1__updateWrapGen;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://10.8.0.55:8081/WebServiceCrawler/services/CrawlerCtrl";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___nyapc1__updateWrapGen.nyapc1__updateWrapGen = nyapc1__updateWrapGen;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___nyapc1__updateWrapGen(soap, &soap_tmp___nyapc1__updateWrapGen);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___nyapc1__updateWrapGen(soap, &soap_tmp___nyapc1__updateWrapGen, "-nyapc1:updateWrapGen", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___nyapc1__updateWrapGen(soap, &soap_tmp___nyapc1__updateWrapGen, "-nyapc1:updateWrapGen", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!nyapc1__updateWrapGenResponse)
		return soap_closesock(soap);
	nyapc1__updateWrapGenResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	nyapc1__updateWrapGenResponse->soap_get(soap, "nyapc1:updateWrapGenResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CrawlerCtrlSoapBindingProxy::getTaskQueue(_nyapc1__getTaskQueue *nyapc1__getTaskQueue, _nyapc1__getTaskQueueResponse *nyapc1__getTaskQueueResponse)
{	struct soap *soap = this;
	struct __nyapc1__getTaskQueue soap_tmp___nyapc1__getTaskQueue;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://10.8.0.55:8081/WebServiceCrawler/services/CrawlerCtrl";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___nyapc1__getTaskQueue.nyapc1__getTaskQueue = nyapc1__getTaskQueue;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___nyapc1__getTaskQueue(soap, &soap_tmp___nyapc1__getTaskQueue);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___nyapc1__getTaskQueue(soap, &soap_tmp___nyapc1__getTaskQueue, "-nyapc1:getTaskQueue", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___nyapc1__getTaskQueue(soap, &soap_tmp___nyapc1__getTaskQueue, "-nyapc1:getTaskQueue", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!nyapc1__getTaskQueueResponse)
		return soap_closesock(soap);
	nyapc1__getTaskQueueResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	nyapc1__getTaskQueueResponse->soap_get(soap, "nyapc1:getTaskQueueResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CrawlerCtrlSoapBindingProxy::getWrapTaskQueue(_nyapc1__getWrapTaskQueue *nyapc1__getWrapTaskQueue, _nyapc1__getWrapTaskQueueResponse *nyapc1__getWrapTaskQueueResponse)
{	struct soap *soap = this;
	struct __nyapc1__getWrapTaskQueue soap_tmp___nyapc1__getWrapTaskQueue;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://10.8.0.55:8081/WebServiceCrawler/services/CrawlerCtrl";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___nyapc1__getWrapTaskQueue.nyapc1__getWrapTaskQueue = nyapc1__getWrapTaskQueue;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___nyapc1__getWrapTaskQueue(soap, &soap_tmp___nyapc1__getWrapTaskQueue);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___nyapc1__getWrapTaskQueue(soap, &soap_tmp___nyapc1__getWrapTaskQueue, "-nyapc1:getWrapTaskQueue", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___nyapc1__getWrapTaskQueue(soap, &soap_tmp___nyapc1__getWrapTaskQueue, "-nyapc1:getWrapTaskQueue", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!nyapc1__getWrapTaskQueueResponse)
		return soap_closesock(soap);
	nyapc1__getWrapTaskQueueResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	nyapc1__getWrapTaskQueueResponse->soap_get(soap, "nyapc1:getWrapTaskQueueResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CrawlerCtrlSoapBindingProxy::takeTask(_nyapc1__takeTask *nyapc1__takeTask, _nyapc1__takeTaskResponse *nyapc1__takeTaskResponse)
{	struct soap *soap = this;
	struct __nyapc1__takeTask soap_tmp___nyapc1__takeTask;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://10.8.0.55:8081/WebServiceCrawler/services/CrawlerCtrl";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___nyapc1__takeTask.nyapc1__takeTask = nyapc1__takeTask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___nyapc1__takeTask(soap, &soap_tmp___nyapc1__takeTask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___nyapc1__takeTask(soap, &soap_tmp___nyapc1__takeTask, "-nyapc1:takeTask", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___nyapc1__takeTask(soap, &soap_tmp___nyapc1__takeTask, "-nyapc1:takeTask", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!nyapc1__takeTaskResponse)
		return soap_closesock(soap);
	nyapc1__takeTaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	nyapc1__takeTaskResponse->soap_get(soap, "nyapc1:takeTaskResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CrawlerCtrlSoapBindingProxy::getTaskByJobId(_nyapc1__getTaskByJobId *nyapc1__getTaskByJobId, _nyapc1__getTaskByJobIdResponse *nyapc1__getTaskByJobIdResponse)
{	struct soap *soap = this;
	struct __nyapc1__getTaskByJobId soap_tmp___nyapc1__getTaskByJobId;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://10.8.0.55:8081/WebServiceCrawler/services/CrawlerCtrl";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___nyapc1__getTaskByJobId.nyapc1__getTaskByJobId = nyapc1__getTaskByJobId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___nyapc1__getTaskByJobId(soap, &soap_tmp___nyapc1__getTaskByJobId);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___nyapc1__getTaskByJobId(soap, &soap_tmp___nyapc1__getTaskByJobId, "-nyapc1:getTaskByJobId", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___nyapc1__getTaskByJobId(soap, &soap_tmp___nyapc1__getTaskByJobId, "-nyapc1:getTaskByJobId", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!nyapc1__getTaskByJobIdResponse)
		return soap_closesock(soap);
	nyapc1__getTaskByJobIdResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	nyapc1__getTaskByJobIdResponse->soap_get(soap, "nyapc1:getTaskByJobIdResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CrawlerCtrlSoapBindingProxy::delJob(_nyapc1__delJob *nyapc1__delJob, _nyapc1__delJobResponse *nyapc1__delJobResponse)
{	struct soap *soap = this;
	struct __nyapc1__delJob soap_tmp___nyapc1__delJob;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://10.8.0.55:8081/WebServiceCrawler/services/CrawlerCtrl";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___nyapc1__delJob.nyapc1__delJob = nyapc1__delJob;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___nyapc1__delJob(soap, &soap_tmp___nyapc1__delJob);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___nyapc1__delJob(soap, &soap_tmp___nyapc1__delJob, "-nyapc1:delJob", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___nyapc1__delJob(soap, &soap_tmp___nyapc1__delJob, "-nyapc1:delJob", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!nyapc1__delJobResponse)
		return soap_closesock(soap);
	nyapc1__delJobResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	nyapc1__delJobResponse->soap_get(soap, "nyapc1:delJobResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CrawlerCtrlSoapBindingProxy::updateJobUrl(_nyapc1__updateJobUrl *nyapc1__updateJobUrl, _nyapc1__updateJobUrlResponse *nyapc1__updateJobUrlResponse)
{	struct soap *soap = this;
	struct __nyapc1__updateJobUrl soap_tmp___nyapc1__updateJobUrl;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://10.8.0.55:8081/WebServiceCrawler/services/CrawlerCtrl";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___nyapc1__updateJobUrl.nyapc1__updateJobUrl = nyapc1__updateJobUrl;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___nyapc1__updateJobUrl(soap, &soap_tmp___nyapc1__updateJobUrl);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___nyapc1__updateJobUrl(soap, &soap_tmp___nyapc1__updateJobUrl, "-nyapc1:updateJobUrl", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___nyapc1__updateJobUrl(soap, &soap_tmp___nyapc1__updateJobUrl, "-nyapc1:updateJobUrl", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!nyapc1__updateJobUrlResponse)
		return soap_closesock(soap);
	nyapc1__updateJobUrlResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	nyapc1__updateJobUrlResponse->soap_get(soap, "nyapc1:updateJobUrlResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CrawlerCtrlSoapBindingProxy::getWrapInvalidTaskByJobId(_nyapc1__getWrapInvalidTaskByJobId *nyapc1__getWrapInvalidTaskByJobId, _nyapc1__getWrapInvalidTaskByJobIdResponse *nyapc1__getWrapInvalidTaskByJobIdResponse)
{	struct soap *soap = this;
	struct __nyapc1__getWrapInvalidTaskByJobId soap_tmp___nyapc1__getWrapInvalidTaskByJobId;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://10.8.0.55:8081/WebServiceCrawler/services/CrawlerCtrl";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___nyapc1__getWrapInvalidTaskByJobId.nyapc1__getWrapInvalidTaskByJobId = nyapc1__getWrapInvalidTaskByJobId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___nyapc1__getWrapInvalidTaskByJobId(soap, &soap_tmp___nyapc1__getWrapInvalidTaskByJobId);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___nyapc1__getWrapInvalidTaskByJobId(soap, &soap_tmp___nyapc1__getWrapInvalidTaskByJobId, "-nyapc1:getWrapInvalidTaskByJobId", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___nyapc1__getWrapInvalidTaskByJobId(soap, &soap_tmp___nyapc1__getWrapInvalidTaskByJobId, "-nyapc1:getWrapInvalidTaskByJobId", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!nyapc1__getWrapInvalidTaskByJobIdResponse)
		return soap_closesock(soap);
	nyapc1__getWrapInvalidTaskByJobIdResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	nyapc1__getWrapInvalidTaskByJobIdResponse->soap_get(soap, "nyapc1:getWrapInvalidTaskByJobIdResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CrawlerCtrlSoapBindingProxy::getWrapId(_nyapc1__getWrapId *nyapc1__getWrapId, _nyapc1__getWrapIdResponse *nyapc1__getWrapIdResponse)
{	struct soap *soap = this;
	struct __nyapc1__getWrapId soap_tmp___nyapc1__getWrapId;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://10.8.0.55:8081/WebServiceCrawler/services/CrawlerCtrl";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___nyapc1__getWrapId.nyapc1__getWrapId = nyapc1__getWrapId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___nyapc1__getWrapId(soap, &soap_tmp___nyapc1__getWrapId);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___nyapc1__getWrapId(soap, &soap_tmp___nyapc1__getWrapId, "-nyapc1:getWrapId", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___nyapc1__getWrapId(soap, &soap_tmp___nyapc1__getWrapId, "-nyapc1:getWrapId", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!nyapc1__getWrapIdResponse)
		return soap_closesock(soap);
	nyapc1__getWrapIdResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	nyapc1__getWrapIdResponse->soap_get(soap, "nyapc1:getWrapIdResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CrawlerCtrlSoapBindingProxy::getWraptype(_nyapc1__getWraptype *nyapc1__getWraptype, _nyapc1__getWraptypeResponse *nyapc1__getWraptypeResponse)
{	struct soap *soap = this;
	struct __nyapc1__getWraptype soap_tmp___nyapc1__getWraptype;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://10.8.0.55:8081/WebServiceCrawler/services/CrawlerCtrl";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___nyapc1__getWraptype.nyapc1__getWraptype = nyapc1__getWraptype;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___nyapc1__getWraptype(soap, &soap_tmp___nyapc1__getWraptype);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___nyapc1__getWraptype(soap, &soap_tmp___nyapc1__getWraptype, "-nyapc1:getWraptype", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___nyapc1__getWraptype(soap, &soap_tmp___nyapc1__getWraptype, "-nyapc1:getWraptype", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!nyapc1__getWraptypeResponse)
		return soap_closesock(soap);
	nyapc1__getWraptypeResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	nyapc1__getWraptypeResponse->soap_get(soap, "nyapc1:getWraptypeResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
