40a41,42
> #include "nsISoapInter.h"
> #include "nsISoapTask.h"
44a47
> #include <list>
45a49
> #include "gtkBrowser.h"
95,96c99
<      GtkWidget *mozembed;
<      GtkWidget *container;
---
>      GtkWidget *vbox=NULL;
98,99c101
<      nsCOMPtr<nsIBaseWindow> baseWindow;
<      nsCOMPtr<nsIWebBrowser> webBrowser;
---
>     
161,164d162
<      mozembed = gtk_moz_embed_new();
< 
<      gtk_container_add(GTK_CONTAINER(window), mozembed);
< 
166,168c164,165
< 
<      gtk_widget_show(mozembed);
< 
---
>      vbox = gtk_vbox_new(TRUE, 0);
>      gtk_container_add(GTK_CONTAINER(window), vbox);
170c167
< 
---
>      gtk_widget_show(vbox);
201,213c198,199
< 
<      gtk_moz_embed_get_nsIWebBrowser(GTK_MOZ_EMBED(mozembed), getter_AddRefs(webBrowser));
<      if( webBrowser == nsnull )
<      {
< 	  std::cout<<"webBrowser load error "<<std::endl;
< 	  return 0;
<      }
<      gtk_widget_hide(mozembed);
<      gtk_widget_hide(window);
<      /**********set listener***********/
< 
<      nsCOMPtr<nsIWebProgressListener> webl;
<      rv=servMan->GetServiceByContractID(lstStr.c_str(), NS_GET_IID(nsIWebProgressListener), getter_AddRefs(webl));
---
>      mozilla_prefs_set_string (servMan,"general.useragent.override", "Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.0.8) Gecko/2009032600 SUSE/3.0.8-1.1 Firefox/3.0.8");
>      nsCOMPtr<nsIStatManager> sm=do_CreateInstance(lstStr.c_str(),&rv);
216,218c202,203
<  	  std::cout<<"Get listener  Error:"<<std::hex<<rv<<std::endl;
< 	  return 0;
< 	  
---
> 	  std::cout<<"Get stat manager Error:"<<std::hex<<rv<<std::endl;
> 	  return 0;    
220,222c205,206
< 
<      nsCOMPtr<nsIBrowserConnector> webs=do_QueryInterface(webl,&rv);
<      if (NS_FAILED(rv))
---
>      nsCOMPtr<nsISoapInter> inter=do_CreateInstance("@nyapc.com/XPCOM/nsSoapInter;1",&rv);
>      if (NS_FAILED(rv)) 
224,225c208,209
<  	  std::cout<<"Get listener  Error:"<<std::hex<<rv<<std::endl;
< 	  return 0;
---
>        std::cout<<"Init Soap Inter error\n";
> 	  return 0;    
227c211,230
<      std::cout<<"Crawler ID:"<<cid<<std::endl;
---
>      nsCOMPtr<nsISoapTask> task;
>      inter->GetTask(cid,20,getter_AddRefs(task));
>      sm->SetInter(inter);
>      sm->SetTask(task);
>      PRInt32 len;
>      task->GetUrlCount(&len);
>      std::list<gtkBrowser> bList;
>      for(PRInt32 index=0;index<len;index++)
>        {
> 	 int Uid
> 	 nsEmbedCString aurl("");
> 	 task->GetUrlByIndex(index,&Uid,aurl);
> 	 std::cout<<"cur UID:"<<Uid<<"url:"<<aurl.get()<<"\n";
> 	 gtkBrowser gb(vbox,Uid);
> 
> 	 gb.SetListener(sm);
> 	 gb.SetRunlevel(mozSet);
> 	 gb.SetUrl(aurl);
> 	 bList.push_back(gb);
>        }
229,247c232,236
<      webs->SetID(cid);
<      webs->SetInterrupt(interTime);
<      webs->SetDefDoc(maxDoc);
<      webs->SetBrowser(webBrowser);
< 
<      nsCOMPtr<nsIWebBrowserPersist> webPer=do_QueryInterface(webBrowser);
<      PRUint32 flag;
<      webPer->GetPersistFlags(&flag);
<      //webPer->SetPersistFlags(flag|
< //			     nsIWebBrowserPersist::PERSIST_FLAGS_FIXUP_LINKS_TO_DESTINATION);
<      webPer->SetPersistFlags(flag|
< 			     nsIWebBrowserPersist::PERSIST_FLAGS_DONT_FIXUP_LINKS);
< 
<      nsCOMPtr<nsIWeakReference> thisListener(do_GetWeakReference(webl,&rv));
<      if (NS_FAILED(rv))
<      {
<  	  std::cout<<"Get weak ref  Error:"<<std::hex<<rv<<std::endl;
< 	  return 0;
<      }
---
>      for(std::list<gtkBrowser>::iterator it=bList.begin();it!=bList.end();++it)
>        it->Start();
>      gtk_widget_hide(vbox);
>      gtk_widget_hide(window);
>      /**********set listener***********/
249,276c238,244
<      webBrowser->AddWebBrowserListener(thisListener, nsIWebProgressListener::GetIID());
<      mozilla_prefs_set_string (servMan,"general.useragent.override", "Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.0.8) Gecko/2009032600 SUSE/3.0.8-1.1 Firefox/3.0.8");
<      nsCOMPtr<nsIWebBrowserSetup> setup = do_QueryInterface(webBrowser);
<      PRBool allow_plug=PR_FALSE,allow_js=PR_FALSE,allow_frame=PR_FALSE,allow_img=PR_FALSE,allow_rd=PR_FALSE,allow_dns=PR_TRUE;
<      switch(mozSet)
<      {
<      case 5:
< 	  allow_frame=PR_TRUE;
<      case 4:
< 	  allow_plug=PR_TRUE;
<      case 3:
< 	  allow_img=PR_TRUE;
<      case 2:
< 	  allow_rd=PR_TRUE;
<      case 1:
< 	  allow_js=PR_TRUE;
<      default:
< 	  break;
<      }     
< 
<      rv=setup->SetProperty(nsIWebBrowserSetup::SETUP_ALLOW_PLUGINS,allow_plug);
<      rv|=setup->SetProperty(nsIWebBrowserSetup::SETUP_ALLOW_JAVASCRIPT,allow_js);
<      rv|=setup->SetProperty(nsIWebBrowserSetup::SETUP_ALLOW_META_REDIRECTS,allow_rd);
<      rv|=setup->SetProperty(nsIWebBrowserSetup::SETUP_ALLOW_SUBFRAMES,allow_frame);
<      rv|=setup->SetProperty(nsIWebBrowserSetup::SETUP_ALLOW_IMAGES,allow_img);
<      if (NS_FAILED(rv)) {
< 	  std::cout<<"WebBrowser setup  Error:"<<std::hex<<rv<<std::endl;
<      }
---
>      
>      std::cout<<"Crawler ID:"<<cid<<std::endl;
>      
>      
>      
>      
>      
